// Yoinked from Jekyll's ShootingRangeDummy.
// https://github.com/jekyllgrim/GZDoom-Target-Dummy MIT License
// https://forum.zdoom.org/viewtopic.php?t=77948
// Yoinker: JOELwindows7
// As is with target address 0 bug still in it. Idk yet how to solve that bug pls help
// Also, we must rename it just in case someone accidentally enabled that original mod pk3.
// Damn brother. This is how you implement DoomEd, look at MAPINFO.txt! Don't forget that next time.
/*
MIT License

Copyright (c) 2023 jekyllgrim

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


class JekyllPShootingRangeHandler : EventHandler
{
	override void NetworkProcess(consoleEvent e)
	{
		name eventname = e.name;
		// if (eventname == 'summonJekyllDummy' || e.name.IndexOf(eventname) >= 0)
		// if (eventname == 'summonJekyllDummy')
		if (eventname == 'summonJekyllDummy' || e.name.IndexOf('summonJekyllDummy') > -1)
		// if (eventname == 'summonJekyllDummy' || e.name.IndexOf(eventname) != -1)
		// if (eventname == 'summonJekyllDummy' || e.name.IndexOf(eventname) == 0)
		{
			let pmo = players[e.player].mo;
			if (!pmo)
				return;
			
			let dum = JekyllPShootingRangeDummy(Actor.Spawn("JekyllPShootingRangeDummy", pmo.pos));
			if (dum)
			{
				dum.Warp(pmo, pmo.radius + dum.radius, 0, 0);
				dum.angle = pmo.angle + 180;
				array<string> cmdstring;
				e.name.Split(cmdstring, ":");
				if (cmdstring.Size() == 2)
				{
					dum.ApplyClassStyle(cmdstring[1]);
				}
			}
		}
	}
}

class JekyllPShootingRangeDummy : Actor
{
	//$Category "Monsters"
	//$Title "Shooting Range Dummy"
	
	const DAMPING = 0.032;
	const PI = 3.14159;
    int receivedDmg;
    int dmgStaggerTime;
    string inf;
    string src;
	double pitchangVel;
	double pitchang;
	double rollangVel;
	double rollang;
	double hitDir;
	double hitangle;
	vector3 dmgpos;
	double basepitch;
	int classhealth;
	state spriteMainState;
	state spriteDeathState;	
	int deadtics;

	Default
	{
		//$Title Target Dummy
		//$Category Decoration
		+ISMONSTER
		+SHOOTABLE
		+SOLID
		+DONTTHRUST
		+NOTIMEFREEZE
		+NODAMAGE
		+NOBLOOD
		+DONTGIB
		+PUFFONACTORS
		+NOICEDEATH
		Radius 20;
		Height 72;
		Mass 100;
		painsound "targetdummy/pain";
		painchance 96;
		//Tag "Target dummy";		
		Tag "$JEKYLLTARGETDUMMY";	
	}

	static clearscope double LinearMap(double val, double source_min, double source_max, double out_min, double out_max, bool clampIt = false)
	{
		double d = (val - source_min) * (out_max - out_min) / (source_max - source_min) + out_min;
		if (clampit)
		{
			double truemax = out_max > out_min ? out_max : out_min;
			double truemin = out_max > out_min ? out_min : out_max;
			d = Clamp(d, truemin, truemax);
		}
		return d;
	}

	void ApplyClassStyle(name classname)
	{
		class<Actor> cls = classname;
		if (!cls)
		{
			//console.printf("%s is not a valid class name. Reverting to default dummy model.", classname);
			console.printf(StringTable.Localize("$JEKYLLNAMEINVALID"), classname);
			return;
		}
		
		let def = GetDefaultByType(cls);

		if (!def.bISMONSTER)
		{
			//console.printf("%s is not a monster class name. Reverting to default dummy model.", classname);
			console.printf(StringTable.Localize("$JEKYLLNOTMONSTER"), classname);
			return;
		}

		if (def)
		{
			spriteMainState = def.FindState("Missile");
			if (!spriteMainState)
				spriteMainState = def.FindState("Melee");
			if (!spriteMainState)
				spriteMainState = def.spawnstate;				
			if (!spriteMainState)
			{
				//console.printf("%s class does not have a valid spawn states. Reverting to default dummy model.", classname);
				console.printf(StringTable.Localize("$JEKYLLSPAWNINVALID"), classname);
				return;
			}
			sprite = spriteMainState.sprite;
			frame = spriteMainState.frame;
			bFLATSPRITE = true;

			let dstate = def.FindState("Death");
			while (dstate)
			{
				if (!dstate.nextstate || dstate.tics == -1)
				{
					spriteDeathState = dstate;
					break;
				}
				dstate = dstate.nextstate;
			}

			A_SetTranslation("WoodenTranslation");
			// SetTag(String.Format("%s %s", def.GetTag(), "target dummy"));
			SetTag(String.Format("%s %s", def.GetTag(), StringTable.Localize("$JEKYLLTARGETDUMMY")));
			classhealth = def.GetMaxHealth();
			health = def.GetMaxHealth();
			A_SetSize(def.radius, def.height);
			scale = def.scale;

			bNORADIUSDMG = def.bNORADIUSDMG;
			bBOSS = def.bBOSS;
			mass = def.mass;
			painchance = def.painchance;
			painsound = def.painsound;
			deathsound = def.deathsound;
		}
	}

	void StartSwing(int damage)
	{
		double swingSpeed = Clamp(damage * 0.006, -0.5, 0.5) * LinearMap(mass, 100, 1000, 1, 0.1, true);	
		double pitchFacFront = LinearMap(abs(hitangle), 0, 90, -1., 0., true);
		double pitchFacBack = LinearMap(abs(hitangle), 90, 180, 0., 1., true);
		pitchangVel = (swingspeed * swingSpeed * pitchFacFront) + (swingspeed * swingSpeed * pitchFacBack);
		double rollFacFront = LinearMap(hitangle, 0, -90, 0, -1., true);
		double rollFacBack = LinearMap(hitangle, 0, 90, 0, 1., true);
		rollangVel = (swingspeed * swingSpeed * rollFacFront) + (swingspeed * swingSpeed * rollFacBack);
	}

	void SpawnDamageNumbers(int damage)
	{
		string dmgstring = String.Format("%d", damage);
		int len = dmgstring.CodePointCount();
		for (int i = 0; i < len; i++)
		{
			let dnum = Spawn("JekyllPDamageNumber", dmgpos);
			if (dnum)
			{
				dnum.A_SpriteOffset(i * 8 * dnum.scale.x);
				//string thisnum = dmgstring.Mid(i, 1);
				dnum.frame = dmgstring.ByteAt(i) - int("0");// thisnum.ToInt();
				if (!bSHOOTABLE)
				{
					dnum.scale.y *= 1.2;
				}
			}
		}
	}

	override int DamageMobj (Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		inf = inflictor ? inflictor.GetTag() : "unknown";
		src = source ?  source.GetTag() : "unknown";

        receivedDmg += damage;
		if (classhealth > 0)
			classhealth -= damage;
		
		if (random[simpainch](1, 256) <= painchance)
			A_StartSound(painsound, CHAN_BODY, CHANF_NOSTOP);
		
		//JOELwindows7: attempt fix
		//if(self == 0) return;
		//if(inflictor == null) return;
		
		hitangle = inflictor ? DeltaAngle(self.angle, AngleTo(inflictor)) : 0.0; // JOELwindows7: This is the crash tendency! try catch it!!
		dmgStaggerTime = 1;

		dmgpos = pos + (0,0,height * 0.5);
		if (inflictor && inflictor != source)
		{
			let diff = Level.Vec2Diff(dmgpos.xy, inflictor.pos.xy);
			let dir = diff.unit();
			dmgpos.xy += (dir * radius * 0.75);
			dmgpos.z = inflictor.pos.z;
		}

		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		angle = Normalize180(angle);
	}

    override void Tick()
    {        
        super.Tick(); 

		if (deadtics > 0)
		{
			deadtics--;
			if (deadtics == 0)
			{
				bSHOOTABLE = true;
				sprite = spriteMainState.sprite;
				frame = spriteMainState.frame;
			}
		}

        if (dmgStaggerTime > 0)
        {
            dmgStaggerTime--;
            if (dmgStaggerTime <= 0)
            {
				string died;
				if (bFLATSPRITE && classhealth <= 0)
				{
					// died = " \c[Red]and died";
					died = StringTable.Localize("$JEKYLLDUMMYDIED");
					A_StartSound(deathsound, CHAN_BODY, CHANF_NOSTOP);
					classhealth = health;
					bSHOOTABLE = false;
					sprite = spriteDeathState.sprite;
					frame = spriteDeathState.frame;
					deadtics = 70;
				}
				else
				{
					StartSwing(receivedDmg);				
					//if (receivedDmg > 15)
					//	A_StartSound(painsound, CHAN_BODY, CHANF_NOSTOP);
				}
				SpawnDamageNumbers(receivedDmg);

				//console.printfEx(PRINT_NOLOG, "\c[Green]%s received \c[Red]%d damage\c[Green] from \c[Cyan]%s\c[Green] (source: \c[Cyan]%s\c[Green])%s", GetTag(), receivedDmg, inf, src, died);
                //console.printfEx(PRINT_NOLOG, StringTable.Localize("\c[Green]%s $JEKYLLRECEIVED \c[Red]%d $JEKYLLDAMAGE\c[Green] $JEKYLLFROM \c[Cyan]%s\c[Green] ($JEKYLLSOURCE: \c[Cyan]%s\c[Green])%s"), GetTag(), receivedDmg, inf, src, died);
                console.printfEx(PRINT_NOLOG, StringTable.Localize("$JEKYLLDUMMYDAM"), GetTag(), receivedDmg, inf, src, died);
                receivedDmg = 0;
            }
        }

		pitchang = Clamp(pitchang += pitchangVel, -1.5, 1.5);
		pitchangVel += -(DAMPING * pitchang) - pitchangVel*DAMPING;
		pitch = pitchang * 180.0 / PI - (bFLATSPRITE ? 90 : 0);
		rollang = Clamp(rollang += rollangVel, -1.2, 1.2);
		rollangVel += -(DAMPING * rollang) - rollangVel*DAMPING;
		roll = rollang * 180.0 / PI * (bFLATSPRITE ? -1 : 1);
    }

	States {
	Spawn:
		JDUM A -1;
		stop;
	}
}

class JekyllPDamageNumber : Actor
{
	Default
	{
		+NOBLOCKMAP
		scale 1.5;
	}

	override void Tick()
	{
		SetZ(pos.z+0.75);
		if (GetAge() > 25)
			A_FadeOut(0.05);
	}
	
	States {
	Spawn:
		TDNU A -1;
		stop;
	}
}