// Oke here we go
// (JOELwindows7)

class LevelSelectNow
{
	static void doLevelSelectNow(){
		// https://zdoom.org/wiki/ActivateMenu
		// https://zdoom.org/wiki/SetMenu
		//let levelMenu = new("LevelSelectNowMenu");
		//levelMenu.init(Menu.currentMenu());
		//levelMenu.activateMenu();
		
		Menu.setMenu("LevelSelectNowMenu");
	}
}

class HardCodeLevelName
{
	string level;
	string label;

	static HardCodeLevelName Create(string level, string label = "")
	{
		let h = New('HardCodeLevelName');
		if(h)
		{
			h.level = level;
			h.label = label;
		}
		return h;
	}
}

class LevelSelectNowHandler : LMBH_ZF_Handler
{
	LevelSelectNowMenu link;

	override void elementHoverChanged(LMBH_ZF_Element caller, Name command, bool unhovered) 
	{
		// I gotta Jmod again!
		If(unhovered||!(caller is "LMBH_ZF_Button")){Return;}
		link.SetFocus(caller,LMBH_ZF_NavEventType_Tab);
	}
	
	override void buttonClickCommand(LMBH_ZF_Button caller, Name command)
	{
		// pls why switch case only numbers not string?! Don't make me look like that guy.
		// https://zdoom.org/wiki/ChangeLevel_(ZScript)
		// https://zdoom.org/wiki/String
		String nameSake = command;
		Array<String> breakItDown;
		nameSake.split(breakItDown, "::");
		if(breakItDown[0] == "L")
		{
			console.printf("GO to Level: %s", breakItDown[1]);
			Level.ChangeLevel(breakItDown[1],0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		// PAIN IS TEMPORARY, GLORY IS FOREVER
		/*
		if(command == "L-JUSTFITE"){
			console.printf("GO to JUSTFITE");
			//CallACS("ChangeLevel","JUSTFITE",0, CHANGELEVEL_NOINTERMISSION);
			//ACS_NamedExecute("LevelJustfite",0);
			//CallACS("LevelJustfite");
			Level.ChangeLevel("JUSTFITE",0,CHANGELEVEL_NOINTERMISSION,-1);
			//Destroy();
			//Close();
			link.Close();
		}
		else if(command == "L-RIGHTFRN"){
			console.printf("GO to RIGHTFRN");
			//CallACS("LevelRightFrn");
			Level.ChangeLevel("RIGHTFRN",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-MBHADV"){
			console.printf("GO to Megawad Mboh Adventure");
			//CallACS("MegawadMBHADV");
			Level.ChangeLevel("MBH01",0,CHANGELEVEL_NOINTERMISSION | CHANGELEVEL_RESETINVENTORY | CHANGELEVEL_RESETHEALTH,-1);
			link.Close();
		}
		else if(command == "L-PLMSKY1"){
			console.printf("GO to PLMSKY1");
			//CallACS("LevelPlmSky1");
			Level.ChangeLevel("PLMSKY1",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-MECHSKY1"){
			console.printf("GO to MECHSKY1");
			//CallACS("LevelMechSky1");
			Level.ChangeLevel("MECHSKY1",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-CHORALBE"){
			console.printf("GO to Choral Bae");
			//CallACS("LevelChoralBe");
			Level.ChangeLevel("CHORALBE",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-FREELD"){
			console.printf("GO to Freeloader hell");
			Level.ChangeLevel("FREELD",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-TELEFAST"){
			console.printf("GO to Telefast demo");
			Level.ChangeLevel("TELEFAST",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-DONUTER"){
			console.printf("GO to Floor Donut demo");
			Level.ChangeLevel("DONUTER",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-PORTALA"){
			console.printf("GO to Portal Sector demo");
			Level.ChangeLevel("PORTALA",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-TOTITLE"){
			Level.ChangeLevel("TOTITLE",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-TOTITLE2"){
			Level.ChangeLevel("TOTITLE2",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-TOTITLE3"){
			Level.ChangeLevel("TOTITLE3",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-MORATE"){
			Level.ChangeLevel("MORATE",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-DODTEL"){
			Level.ChangeLevel("DODTEL",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-T_SCTTG"){
			Level.ChangeLevel("T_SCTTG",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-T_CUZOM"){
			Level.ChangeLevel("T_CUZOM",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-SELDUAR"){
			Level.ChangeLevel("SELDUAR",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-T_RSPAWN"){
			Level.ChangeLevel("T_RSPAWN",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		else if(command == "L-T_CA_OUT"){
			Level.ChangeLevel("T_CA_OUT",0,CHANGELEVEL_NOINTERMISSION,-1);
			link.Close();
		}
		*/
		else
		{
			console.printf("GO to %s", command);
			// if command preceded by `L-` then call acs of that thing there!
		}
	}
}

class LMHB_ZF_BaseGenericMenu : LMBH_ZF_GenericMenu
{

}

class LevelSelectNowMenu : LMBH_ZF_GenericMenu 
{
	LMBH_ZF_ListFrame liste;
	LMBH_ZF_Image background;
	Font smallFont;
	Array<HardCodeLevelName> hardCodeLevels;
	Array<LMBH_ZF_Element> levelButtons;
	// static const HardCodeLevelName hardCodeLevels[] = 
	// {
	// 	HardCodeLevelName.Create("MBOHADV")
	// };

	void bringFocuses()
	{
		// Let's give these level buttons their next focuses.
		/*
		If you press Up key, go to previous button. Down, next.

		Also remember, C except lua, array starts from 0. idk why Lua's 1, go complain all you want.
		*/
		for(int i = 0; i < levelButtons.size(); i++)
		{
			// Go up. If element is not first, there's previous, otherwise go to last
			if(i > 0) 
			{
				levelButtons[i].setFocusNeighbor(LMBH_ZF_NavEventType_Up,levelButtons[i-1]);
			}
			else 
			{
				levelButtons[i].setFocusNeighbor(LMBH_ZF_NavEventType_Up,levelButtons[levelButtons.size()-1]);
			}

			// Go down. If element is not last, there's next, otherwise go to first
			if(i < levelButtons.size()-1) 
			{
				levelButtons[i].setFocusNeighbor(LMBH_ZF_NavEventType_Down,levelButtons[i+1]);
			}
			else 
			{
				levelButtons[i].setFocusNeighbor(LMBH_ZF_NavEventType_Down,levelButtons[0]);
			}
		}

		// now let's focus on the first button!
		self.setFocus(levelButtons[0], LMBH_ZF_NavEventType_Tab);
	}

	void bringHardCodeLevelNames()
	{
		// This is jank hack! idk how to specialize level selection list
		/*
		But we should've rely just on the Episode menu, no?
		Yeah, we'll have alot, just like those Upstarts. That's why e.g. 
		RAMP has hundreds of shrines, each represents a level to go to.

		hey, atleast we can add more data within later, all just within the text file.
		Yeah I know.. hardcode, yuck! idk anymore how else we define it by JSON just for bespoke?!
		*/
		// https://zdoom.org/wiki/Arrays
		// https://zdoom.org/wiki/ZScript_data_types#Arrays
		// https://zdoom.org/wiki/Dynamic_arrays

		// clear first! the buttons, then the definition itself! this order surely avoids Null Pointer reference I think.
		levelButtons.clear();
		hardCodeLevels.clear();

		// Now add here!
		hardCodeLevels.push(HardCodeLevelName.Create("MBOHADV", String.Format("(MEGAWAD) %s", StringTable.Localize("$MBOHADV"))));
		hardCodeLevels.push(HardCodeLevelName.Create("JUSTFITE", StringTable.Localize("$JUSTFITE")));
		hardCodeLevels.push(HardCodeLevelName.Create("RIGHTFRN", StringTable.Localize("$RIGHTFRN")));
		hardCodeLevels.push(HardCodeLevelName.Create("PLMSKY1", StringTable.Localize("$PLMSKY1")));
		hardCodeLevels.push(HardCodeLevelName.Create("MECHSKY1", StringTable.Localize("$MECHSKY1")));
		hardCodeLevels.push(HardCodeLevelName.Create("CHORALBE", StringTable.Localize("$CHORALBE")));
		hardCodeLevels.push(HardCodeLevelName.Create("FREELD", StringTable.Localize("$FREELD")));
		hardCodeLevels.push(HardCodeLevelName.Create("TELEFAST", StringTable.Localize("$TELEFAST")));
		hardCodeLevels.push(HardCodeLevelName.Create("DONUTER", StringTable.Localize("$DONUTER")));
		hardCodeLevels.push(HardCodeLevelName.Create("PORTALA", StringTable.Localize("$PORTALA")));
		hardCodeLevels.push(HardCodeLevelName.Create("TOTITLE", StringTable.Localize("$TOTITLE")));
		hardCodeLevels.push(HardCodeLevelName.Create("TOTITLE2", StringTable.Localize("$TOTITLE2")));
		hardCodeLevels.push(HardCodeLevelName.Create("TOTITLE3", StringTable.Localize("$TOTITLE3")));
		hardCodeLevels.push(HardCodeLevelName.Create("MORATE", StringTable.Localize("$MORATE")));
		hardCodeLevels.push(HardCodeLevelName.Create("SELDUAR", String.Format("(DM) %s", StringTable.Localize("$SELDUAR"))));
		hardCodeLevels.push(HardCodeLevelName.Create("DODTEL", StringTable.Localize("$DODTEL")));
		hardCodeLevels.push(HardCodeLevelName.Create("T_SCTTG", StringTable.Localize("$T_SCTTG")));
		hardCodeLevels.push(HardCodeLevelName.Create("T_CUZOM", StringTable.Localize("$T_CUZOM")));
		hardCodeLevels.push(HardCodeLevelName.Create("T_RSPAWN", StringTable.Localize("$T_RSPAWN")));
		hardCodeLevels.push(HardCodeLevelName.Create("T_CA_OUT", StringTable.Localize("$T_CA_OUT")));
	}
	
	override void init (Menu parent)
	{
		LevelSelectNowHandler handler;

		bringHardCodeLevelNames();
		// hardCodeLevels = {
		// 	HardCodeLevelName("MBOHADV"),
		// };
		
		Vector2 baseRes = (320, 200);
		Super.init(parent);
		SetBaseResolution (baseRes);
		
		 // Get GZDoom's new options menu smallfont.
        smallFont = OptionFont ();
		
		handler = new ('LevelSelectNowHandler');
		handler.link = self;
		
		LMBH_ZF_Element elem;
		
		double daHeight = 256+128+128+128;
		// Create the box image's textures.
        let boxTexture = LMBH_ZF_BoxTextures.CreateTexturePixels
        (
            // The texture itself.
            "graphics/Box8x8.png",
            // The top-left corner of the middle of the box.
            (2, 2),
            // The bottom-right corner of the middle of the box.
            (6, 6),
            // Whether to scale (true) or tile (false) the sides.
            false,
            // Whether to scale (true) or tile (false) the middle.
            false
        );
		let boxBackground = LMBH_ZF_BoxTextures.CreateTexturePixels
        (
            // The texture itself.
            "graphics/Box8x8Bg.png",
            // The top-left corner of the middle of the box.
            (2, 2),
            // The bottom-right corner of the middle of the box.
            (6, 6),
            // Whether to scale (true) or tile (false) the sides.
            false,
            // Whether to scale (true) or tile (false) the middle.
            false
        );
		// Add a background.
        background = LMBH_ZF_Image.Create
        // background = LMBH_ZF_BoxImage.Create
        (
            // Position
            (0, 0),
            // Size
            // (320, 200),
            (640, 400),
            // Image path/name
            //"graphics/ZFormsExamples/Panel.png",
            "graphics/Box8x8Bg.png",
            // boxBackground,
            // Alignment options
            LMBH_ZF_Image.AlignType_TopLeft,
			// make it tiled
			tiled:1
        );
        // Add the image element into the main frame.
        background.Pack (mainFrame);
        
         

		let focusBox = LMBH_ZF_BoxTextures.CreateTexturePixels (
			//"Graphics/FocusIndicator.png",
			"graphics/Box8x8Focus.png",
			(2, 2),
			(6, 6),
			false,
			false
		);

        
        //Scrollact Jmodded
        let scrollactContainer = LMBH_ZF_ScrollContainer.Create(
        	(0,32),
        	(320,190-32),
        	8,	
        	daHeight,
        	32,
        	boxTexture
        );
        scrollactContainer.Pack(mainFrame);
        let scrollactFrame = LMBH_ZF_Frame(scrollactContainer.GetScrollArea());
        
        
        // Textoid
        elem = LMBH_ZF_Label.create(
        	(8,16),
        	(128,16),
        	StringTable.Localize("$GOTOLEVELSAY"),
        	smallFont
        );
        elem.Pack(mainFrame);
        
        // list
        liste = LMBH_ZF_ListFrame.create(
        	(0,0),
        	(320,daHeight),
        	4	
        );
        liste.Pack(scrollactFrame);
        
        //Level now
		for(int i = 0; i < hardCodeLevels.size(); i++)
		{
			string compensateLabel = hardCodeLevels[i].label;
			if(compensateLabel == "") compensateLabel = StringTable.Localize(String.Format("$%s",hardCodeLevels[i].level));
			elem = LMBH_ZF_Button.create(
				(8,16+(4*i)),
				(50,16),
				text: compensateLabel,
				cmdHandler: handler,
				command: String.Format("L::%s",hardCodeLevels[i].level)
				//, hover: focusBox
			);
			//elem.Pack(scrollactFrame);
			elem.Pack(liste);
			levelButtons.push(elem);
		}
		
		bringFocuses();

		// PAIN IS TEMPORARY, GLORY IS FOREVER
	}

	override void setupFocusIndicator() {
		let focusBox = LMBH_ZF_BoxTextures.CreateTexturePixels (
			//"Graphics/FocusIndicator.png",
			"graphics/Box8x8Focus.png",
			(2, 2),
			(6, 6),
			false,
			false
		);

		setFocusIndicator(LMBH_ZF_BoxImage.create((0, 0), (0, 0), focusBox));
		setFocusPriority(LMBH_ZF_FocusPriority_JustAboveFocused);
	}
	override void positionFocusIndicator(Vector2 pos, Vector2 size) {
		getFocusIndicator().setBox(pos, size);
	}
	override void changeFocusIndicator(LMBH_ZF_Element oldFocus, LMBH_ZF_Element newFocus)
	{
		super.changeFocusIndicator(oldFocus,newFocus);
		//Console.printf("FOCUS: %s", newFocus.getCommand());
	}
}