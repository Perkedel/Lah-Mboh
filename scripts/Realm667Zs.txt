// Realm667 Assets Collections ZScripts
// Amalgamated by JOELwindows7

// Insanity Sphere. DBJ87, That_One_Doom_Mod, BlueShadow, originally from id Software x Midway DOOM 64
// https://www.realm667.com/repository/item-store/powerups-artifacts#preview-30
// ------------------------------------------------------------------------------------------------
//
//   Insanity
//
//     - Written by Blue Shadow.
//
// ------------------------------------------------------------------------------------------------

class PowerInsanity : Powerup
{
	int defDur;

	override void AttachToOwner (Actor other)
	{
		Super.AttachToOwner(other);

		// Get the default duration of the powerup.
		defDur = GetDefaultByType("InsanityStart").EffectTics;
	}

	override void InitEffect ()
	{
		Super.InitEffect();

		if(owner != null && owner.player != null)
		{
			owner.A_PlaySound("InsanitySphere/Start", CHAN_BODY, 0.7);
		}
	}

	override void DoEffect ()
	{
		Super.DoEffect();

		if(owner != null && owner.player != null)
		{
			// Play the "half" sound when the powerup is at half duration.
			if(EffectTics == (defDur >> 1))
			{
				owner.A_PlaySound("InsanitySphere/Half", CHAN_BODY, 0.7);
			}

			// Play the "end" sound when the powerup is at the blinking stage.
			if(EffectTics == BLINKTHRESHOLD)
			{
				owner.A_PlaySound("InsanitySphere/End", CHAN_BODY, 0.7);
			}
		}
	}

	override void OwnerDied ()
	{
		if(owner != null && owner.player != null)
		{
			// Owner is dead, so stop whatever sound that's playing on the "body" channel.
			owner.A_StopSound(CHAN_BODY);
		}

		Super.OwnerDied();
	}
}


// Checkpoint Disk. Matacrat
/*
Name: Checkpoint Disk / Save Disk
Type: Checkpoint / Powerup
Palette: Doom
Summon: sp_SaveDisk
Use type: Instant
Duration: 1 to 3 Seconds.
Brightmaps: No
Actor modification: No
ACS: Yes

Code: Matacrat (and a bit of Korshun)
GLDefs: Matacrat
Sounds: EarthBound's Healing Sound and Tomb Raider's Secret Sound
Sprites: Save Disk Graphic (STDISK) from Id Software
Sprite Edit: None
Idea Base: Exl's Save Disk System and BioHazard's Checkpoint system.
*/
class sp_MultiplayerAutosave
{
    static clearscope void sp_ZscriptAutoSave()
    {
        LevelLocals.MakeAutoSave();
    }
}

// acquired mapper block syndrome

// Crates Rifleman
// https://www.realm667.com/repository/prop-stop/technical#preview-8
/*
Information:
Name: Crate Models
Connection: N/A
Palette: Doom
Summon: Cube[32, 64][Blue, Green, Brown], Crate[32, 64, 128][Clean, Plank, Cross]
Ambient Sound: N/A
De-/Activatable: N/A
Destroyable: N/A
Special Effects: N/A
Brightmaps: N/A
Actor modification: N/A
ACS: N/A

Credits:
Code: Rifleman
GLDefs: N/A
Sounds: N/A
Sprites: OTEX by ukiro
Sprite Edit: Rifleman
Idea Base: No need to make crates with sectors.

Description:
15 models of crates - no need to draw sectors or use 3d floors.
*/
Class Cube64 : Actor
{
	Default
	{
	Health 1;
	Radius 38;
	Height 64;
	+DontThrust;
	+Solid;
	+PuffOnActors;
	+Shootable;
	+NoDamage;
	+NoBlood;
	+NotAutoaimed;
	}
	States
	{
		Spawn:
		TNT1 A -1;
		Stop;
	}
}

Class Cube64Blue : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 64x64 Blue
	}
	States
	{
		Spawn:
		TCBL A -1;
		Stop;
	}
}
Class Cube64Green : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 64x64 Green
	}
	States
	{
		Spawn:
		TCGR A -1;
		Stop;
	}
}
Class Cube64Brown : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 64x64 Brown
	}
	States
	{
		Spawn:
		TCBR A -1;
		Stop;
	}
}
Class Crate64Clean : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 64x64 Clean
	}
	States
	{
		Spawn:
		CRCL A -1;
		Stop;
	}
}
Class Crate64Plank : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 64x64 Plank
	}
	States
	{
		Spawn:
		CRPL A -1;
		Stop;
	}
}
Class Crate64Cross : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 64x64 Cross
	}
	States
	{
		Spawn:
		CRCR A -1;
		Stop;
	}
}

Class Cube128 : Cube64
{
	Default
	{
	
	Health 1;
	Radius 76;
	Height 128;
	}
	States
	{
		Spawn:
		FCAN A -1;
		Stop;
	}
}

Class Crate128Clean : Cube128
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 128x128 Clean
	}
	States
	{
		Spawn:
		CRCL A -1;
		Stop;
	}
}
Class Crate128Plank : Cube128
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 128x128 Plank
	}
	States
	{
		Spawn:
		CRPL A -1;
		Stop;
	}
}
Class Crate128Cross : Cube128
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 128x128 Cross
	}
	States
	{
		Spawn:
		CRCR A -1;
		Stop;
	}
}

Class Cube32 : Cube64
{
	Default
	{
	Health 1;
	Radius 20;
	Height 32;
	}
	States
	{
		Spawn:
		FCAN A -1;
		Stop;
	}
}

Class Cube32Blue : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 32x32 Blue
	}
	States
	{
		Spawn:
		TCBL A -1;
		Stop;
	}
}

Class Cube32Green : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 32x32 Green
	}
	States
	{
		Spawn:
		TCGR A -1;
		Stop;
	}
}

Class Cube32Brown : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 32x32 Brown
	}
	States
	{
		Spawn:
		TCBR A -1;
		Stop;
	}
}

Class Crate32Clean : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 32x32 Clean
	}
	States
	{
		Spawn:
		CRCL A -1;
		Stop;
	}
}
Class Crate32Plank : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 32x32 Plank
	}
	States
	{
		Spawn:
		CRPL A -1;
		Stop;
	}
}
Class Crate32Cross : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 32x32 Cross
	}
	States
	{
		Spawn:
		CRCR A -1;
		Stop;
	}
}