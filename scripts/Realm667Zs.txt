// Realm667 Assets Collections ZScripts
// Amalgamated by JOELwindows7

// Insanity Sphere. DBJ87, That_One_Doom_Mod, BlueShadow, originally from id Software x Midway DOOM 64
// https://www.realm667.com/repository/item-store/powerups-artifacts#preview-30
// ------------------------------------------------------------------------------------------------
//
//   Insanity
//
//     - Written by Blue Shadow.
//
// ------------------------------------------------------------------------------------------------

class PowerInsanity : Powerup
{
	int defDur;

	override void AttachToOwner (Actor other)
	{
		Super.AttachToOwner(other);

		// Get the default duration of the powerup.
		defDur = GetDefaultByType("InsanityStart").EffectTics;
	}

	override void InitEffect ()
	{
		Super.InitEffect();

		if(owner != null && owner.player != null)
		{
			owner.A_PlaySound("InsanitySphere/Start", CHAN_BODY, 0.7);
		}
	}

	override void DoEffect ()
	{
		Super.DoEffect();

		if(owner != null && owner.player != null)
		{
			// Play the "half" sound when the powerup is at half duration.
			if(EffectTics == (defDur >> 1))
			{
				owner.A_PlaySound("InsanitySphere/Half", CHAN_BODY, 0.7);
			}

			// Play the "end" sound when the powerup is at the blinking stage.
			if(EffectTics == BLINKTHRESHOLD)
			{
				owner.A_PlaySound("InsanitySphere/End", CHAN_BODY, 0.7);
			}
		}
	}

	override void OwnerDied ()
	{
		if(owner != null && owner.player != null)
		{
			// Owner is dead, so stop whatever sound that's playing on the "body" channel.
			owner.A_StopSound(CHAN_BODY);
		}

		Super.OwnerDied();
	}
}


// Checkpoint Disk. Matacrat
/*
Name: Checkpoint Disk / Save Disk
Type: Checkpoint / Powerup
Palette: Doom
Summon: sp_SaveDisk
Use type: Instant
Duration: 1 to 3 Seconds.
Brightmaps: No
Actor modification: No
ACS: Yes

Code: Matacrat (and a bit of Korshun)
GLDefs: Matacrat
Sounds: EarthBound's Healing Sound and Tomb Raider's Secret Sound
Sprites: Save Disk Graphic (STDISK) from Id Software
Sprite Edit: None
Idea Base: Exl's Save Disk System and BioHazard's Checkpoint system.
*/
class sp_MultiplayerAutosave
{
    static clearscope void sp_ZscriptAutoSave()
    {
        LevelLocals.MakeAutoSave();
    }
}

// acquired mapper block syndrome

// Crates Rifleman
// https://www.realm667.com/repository/prop-stop/technical#preview-8
/*
Information:
Name: Crate Models
Connection: N/A
Palette: Doom
Summon: Cube[32, 64][Blue, Green, Brown], Crate[32, 64, 128][Clean, Plank, Cross]
Ambient Sound: N/A
De-/Activatable: N/A
Destroyable: N/A
Special Effects: N/A
Brightmaps: N/A
Actor modification: N/A
ACS: N/A

Credits:
Code: Rifleman
GLDefs: N/A
Sounds: N/A
Sprites: OTEX by ukiro
Sprite Edit: Rifleman
Idea Base: No need to make crates with sectors.

Description:
15 models of crates - no need to draw sectors or use 3d floors.
*/
Class Cube64 : Actor
{
	//TODO: Make breakable
	bool user_breakable;

	Default
	{
	Health 1;
	Radius 38;
	Height 64;
	+DontThrust;
	+Solid;
	+PuffOnActors;
	+Shootable;
	+NoDamage;
	+NoBlood;
	+NotAutoaimed;
	+CANPASS;
	+ACTLIKEBRIDGE;
	}
	States
	{
		Spawn:
		TNT1 A -1;
		Stop;
	}
}

Class Cube64Blue : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 64x64 Blue
	}
	States
	{
		Spawn:
		TCBL A -1;
		Stop;
	}
}
Class Cube64Green : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 64x64 Green
	}
	States
	{
		Spawn:
		TCGR A -1;
		Stop;
	}
}
Class Cube64Brown : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 64x64 Brown
	}
	States
	{
		Spawn:
		TCBR A -1;
		Stop;
	}
}
Class Crate64Clean : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 64x64 Clean
	}
	States
	{
		Spawn:
		CRCL A -1;
		Stop;
	}
}
Class Crate64Plank : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 64x64 Plank
	}
	States
	{
		Spawn:
		CRPL A -1;
		Stop;
	}
}
Class Crate64Cross : Cube64
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 64x64 Cross
	}
	States
	{
		Spawn:
		CRCR A -1;
		Stop;
	}
}

Class Cube128 : Cube64
{
	Default
	{
	
	Health 1;
	Radius 76;
	Height 128;
	}
	States
	{
		Spawn:
		FCAN A -1;
		Stop;
	}
}

Class Crate128Clean : Cube128
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 128x128 Clean
	}
	States
	{
		Spawn:
		CRCL A -1;
		Stop;
	}
}
Class Crate128Plank : Cube128
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 128x128 Plank
	}
	States
	{
		Spawn:
		CRPL A -1;
		Stop;
	}
}
Class Crate128Cross : Cube128
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 128x128 Cross
	}
	States
	{
		Spawn:
		CRCR A -1;
		Stop;
	}
}

Class Cube32 : Cube64
{
	Default
	{
	Health 1;
	Radius 20;
	Height 32;
	}
	States
	{
		Spawn:
		FCAN A -1;
		Stop;
	}
}

Class Cube32Blue : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 32x32 Blue
	}
	States
	{
		Spawn:
		TCBL A -1;
		Stop;
	}
}

Class Cube32Green : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 32x32 Green
	}
	States
	{
		Spawn:
		TCGR A -1;
		Stop;
	}
}

Class Cube32Brown : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title TechCrate 32x32 Brown
	}
	States
	{
		Spawn:
		TCBR A -1;
		Stop;
	}
}

Class Crate32Clean : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 32x32 Clean
	}
	States
	{
		Spawn:
		CRCL A -1;
		Stop;
	}
}
Class Crate32Plank : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 32x32 Plank
	}
	States
	{
		Spawn:
		CRPL A -1;
		Stop;
	}
}
Class Crate32Cross : Cube32
{
	Default
	{
	//$Category Decoration/Crate Models
	//$Title Crate 32x32 Cross
	}
	States
	{
		Spawn:
		CRCR A -1;
		Stop;
	}
}

// Duke Nukem Hologram Doomguy DeVloek
// https://www.realm667.com/repository#preview-16
/*
Name: HoloDoomguy
Type: Decoy
Palette: Doom
Summon: HoloDoomguy
Use type: Inventory
Duration: Toggle / 60 seconds
Brightmaps: No
Actor modification: No
ACS: No

Description:
A portable gadget that deploys a hologram of Doomguy when used.
- All nearby monsters forget their current target and attack the hologram instead
- Hologram cannot be destroyed, all attacks go right through it
- Can be turned on and off anytime, turning it off stops the timer
- Monsters may still switch targets if they are attacked (allows infighting and retaliation against the player)
- Can perform rude one-liners and obscene hand gestures to provoke monsters repeatedly
- See holodoomguy.txt to configure range, duration and provoking intervals

Code: DeVloek, Gothic, Player701
GLDefs: DeVloek
Sounds: 3D Realms, ZeroXDiamond
Sprites: id Software, 3D Realms, Mark Quinn, Kinsie
Sprite Edit: DeVloek
Idea base: HoloDuke
*/
Class HoloDoomguy : Inventory
{
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
// =========================== Config ===========================
		prange = 1200;	// Radius in which monster are provoked
		pinterval = 8;	// prokoving interval in seconds (0 disables repeated provoking)
		pvox = true;	// Toggle one-liner playback
	}
	Default
	{
		Inventory.Amount 60;			//
		Inventory.MaxAmount 60;			// Duration in seconds
		Inventory.InterHubAmount 60;	//
// ========================= Config End =========================
		//$Category "Gadgets"
		//$Title "HoloDoomguy"
		//$Color 17
		//$Sprite VHDGICO1
		Inventory.Icon "VHDGICO5"; 		// replace with "VHDGICO1" for a high res icon
		Inventory.PickupMessage "Picked up a HoloDoomguy.";
		+COUNTITEM;
		+INVENTORY.INVBAR;
		scale 0.667;
	}
	actor hologram;
	actor hologramfuzz;
	actor phg;
	actor phgfuzz;
	array<actor> distracted;
	double osc;
	int prange;
	int pinterval;
	bool pvox;
	States
	{
	Spawn:
		VHDG AAAABBBBCCCCDDDD 1
		{
			if (!phg)
			{
				phg = spawn("HoloDoomguyPHG",pos+(0,0,8));
				phgfuzz = spawn("HoloDoomguyPHGfuzz",pos+(0,0,8));
			}
			if (phg)
			{
				phg.Setorigin(pos+(0,0,8),false);
				if (phg.alpha >= 0.8) osc = -0.05;
				if (phg.alpha <= 0.4) osc = 0.05;
				phg.alpha += osc;
				phg.angle += 2;
				if (phgfuzz)
				{
					phgfuzz.angle = phg.angle;
					phgfuzz.Setorigin(phg.pos,false);
				}
			}
			A_SpawnParticle("30FF30",SPF_FULLBRIGHT,lifetime:12,size:2,xoff:random(-3,3),yoff:random(-3,3),zoff:11,velz:1);
		}
		Loop;
	}
	
	override bool TryPickup(in out Actor toucher) //Thanks to Player701 for this check
	{
		bool result = Super.TryPickup(toucher);
        if (result)
        {
            if (phg) phg.destroy();
			if (phgfuzz) phgfuzz.destroy();
        }
        return result;
	}
	
	override bool Use(bool pickup)
	{

		if (owner && owner.player)
		{
			if (!hologram)
			{
				bool bl;
				[bl,hologram] = owner.A_SpawnItemEx("HoloDoomguyDecoy",40,0,2);
				if (hologram)
				{
					hologram.A_Startsound("holodg/on",22273);
					[bl,hologramfuzz] = hologram.A_SpawnItemEx("HoloDoomguyDecoyFuzz");
					AggroMonsters();
				}
			}
			else
			{
				distracted.clear();
				hologram.A_Startsound("holodg/off",22273);
				hologram.destroy();
				if (hologramfuzz) hologramfuzz.destroy();
			}
		}
		return false;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (owner && owner.player && hologram)
		{
			if (hologramfuzz)
			{
				hologramfuzz.angle = hologram.angle;
				hologramfuzz.sprite = hologram.sprite;
				hologramfuzz.frame = hologram.frame;
			}
			int prvk = pinterval*35;
			if (pinterval > 0 && GetAge() % prvk == 0)
			{
				AggroMonsters();
				if (pvox) hologram.A_Startsound("holodg/oneliner",22273,CHANF_NOSTOP);
				hologram.SetStateLabel("Provoke");
			}
			if (GetAge() % 35 == 0)	owner.TakeInventory("HoloDoomguy",1);
		}
	}
	
	override void DepleteOrDestroy() //Thanks to Gothic for this method
	{
		super.DepleteOrDestroy();
		if (!hologram) return;
		distracted.clear();
		hologram.A_Startsound("holodg/off",22273);
		hologram.destroy();
		if (hologramfuzz) hologramfuzz.destroy();
	}
	
	void AggroMonsters()
	{
		distracted.clear();
		BlockThingsIterator it = BlockThingsIterator.Create(hologram,prange);
		while (it.Next())
		{
			let obj = it.thing;
			if (obj.bISMONSTER && obj.health > 0 && !obj.bNOTARGETSWITCH && obj.Distance3D(hologram) <= prange && obj.Checksight(hologram))
			{
				distracted.push(obj);
				obj.target = hologram;
			}
		}
		if (distracted.size() > 0)
		{
			actor selected = distracted[random(1,distracted.size())-1];
			hologram.angle = hologram.AngleTo(selected);
			selected.target = hologram;
		}
	}
}
// ===================== Pickup Hologram =====================
Class HoloDoomguyPHG : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOBLOCKMAP;
	//	+WALLSPRITE; //uncomment for a spinning pickup hologram
		Renderstyle "translucent";
		scale 0.5;
		alpha 0.8;
	}
	States
	{
	Spawn:
		VHDG E 1 bright;
		Loop;
	}
}

Class HoloDoomguyPHGfuzz : HoloDoomguyPHG
{
	Default
	{
		RenderStyle "fuzzy";
	}
}

// ===================== Decoy Hologram =====================
Class HoloDoomguyDecoy : Actor
{
	double osc;
	Default
	{
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+NODAMAGE;
		+NOBLOOD;
		+MOVEWITHSECTOR;
		+DONTTHRUST;
		+SHOOTABLE;
		+BRIGHT;
		Renderstyle "translucent";
		alpha 1.0;
		height 72;
	}
	States
	{
	Spawn:
		VHDG H 1 Oscillate();
		Loop;
	Provoke:
		VHDG GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 1 Oscillate();
		Goto Spawn;
	}
	void Oscillate()
	{
		if (alpha >= 1.0) osc = -0.1;
		if (alpha <= 0.7) osc = 0.1;
		alpha += osc;
	}
}

Class HoloDoomguyDecoyFuzz : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+MOVEWITHSECTOR;
		Renderstyle "fuzzy";
	}
}

// Duke Nukem Hologram Strifeguy DeVloek
// https://www.realm667.com/repository#preview-16
/*
Name: HoloStrifeguy
Type: Decoy
Palette: Strife
Summon: HoloStrifeguy
Use type: Inventory
Duration: Toggle / 60 seconds
Brightmaps: No
Actor modification: No
ACS: No

Description:
A portable gadget that deploys a hologram of Strifeguy when used.
- All nearby enemies forget their current target and attack the hologram instead
- Hologram cannot be destroyed, all attacks go right through it
- Can be turned on and off anytime, turning it off stops the timer
- Enemies may still switch targets if they are attacked (allows infighting and retaliation against the player)
- Can perform rude one-liners and obscene hand gestures to provoke enemies repeatedly
- See holodoomguy.txt to configure range, duration and provoking intervals

Code: DeVloek, Gothic, Player701
GLDefs: DeVloek
Sounds: 3D Realms
Sprites: Rogue Entertainment, 3D Realms
Sprite Edit: DeVloek
Idea base: HoloDuke
*/
Class HoloStrifeguy : Inventory
{
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
// =========================== Config ===========================
		prange = 1200;	// Radius in which monster are provoked
		pinterval = 8;	// prokoving interval in seconds (0 disables repeated provoking)
	}
	Default
	{
		Inventory.Amount 60;			//
		Inventory.MaxAmount 60;			// Duration in seconds
		Inventory.InterHubAmount 60;	//
// ========================= Config End =========================
		//$Category "Gadgets"
		//$Title "HoloStrifeguy"
		//$Color 17
		//$Sprite VHSGICON
		Inventory.Icon "VHSGICO1";
		Inventory.PickupMessage "Picked up a HoloStrifeguy.";
		+COUNTITEM;
		+INVENTORY.INVBAR;
		scale 0.667;
	}
	actor hologram;
	actor hologramfuzz;
	actor phg;
	actor phgfuzz;
	array<actor> distracted;
	double osc;
	int prange;
	int pinterval;
	bool pvox;
	States
	{
	Spawn:
		VHSG AAAABBBBCCCCDDDD 1
		{
			if (!phg)
			{
				phg = spawn("HoloStrifeguyPHG",pos+(0,0,6));
				phgfuzz = spawn("HoloStrifeguyPHGfuzz",pos+(0,0,6));
			}
			if (phg)
			{
				phg.Setorigin(pos+(0,0,6),false);
				if (phg.alpha >= 0.8) osc = -0.05;
				if (phg.alpha <= 0.4) osc = 0.05;
				phg.alpha += osc;
				phg.angle += 2;
				if (phgfuzz)
				{
					phgfuzz.angle = phg.angle;
					phgfuzz.Setorigin(phg.pos,false);
				}
			}
			A_SpawnParticle("7BB3C3",SPF_FULLBRIGHT,lifetime:12,size:2,xoff:random(-3,3),yoff:random(-3,3),zoff:11,velz:1);
		}
		Loop;
	}
	
	override bool TryPickup(in out Actor toucher) //Thanks to Player701 for this check
	{
		bool result = Super.TryPickup(toucher);
        if (result)
        {
            if (phg) phg.destroy();
			if (phgfuzz) phgfuzz.destroy();
        }
        return result;
	}
	
	override bool Use(bool pickup)
	{

		if (owner && owner.player)
		{
			if (!hologram)
			{
				bool bl;
				[bl,hologram] = owner.A_SpawnItemEx("HoloStrifeguyDecoy",40,0,4);
				if (hologram)
				{
					hologram.A_Startsound("holosg/on",22273);
					[bl,hologramfuzz] = hologram.A_SpawnItemEx("HoloStrifeguyDecoyFuzz");
					AggroMonsters();
				}
			}
			else
			{
				distracted.clear();
				hologram.A_Startsound("holosg/off",22273);
				hologram.destroy();
				if (hologramfuzz) hologramfuzz.destroy();
			}
		}
		return false;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (owner && owner.player && hologram)
		{
			if (hologramfuzz)
			{
				hologramfuzz.angle = hologram.angle;
				hologramfuzz.sprite = hologram.sprite;
				hologramfuzz.frame = hologram.frame;
			}
			int prvk = pinterval*35;
			if (pinterval > 0 && GetAge() % prvk == 0)
			{
				AggroMonsters();
				hologram.SetStateLabel("Provoke");
			}
			if (GetAge() % 35 == 0)	owner.TakeInventory("HoloStrifeguy",1);
		}
	}
	
	override void DepleteOrDestroy() //Thanks to Gothic for this method
	{
		super.DepleteOrDestroy();
		if (!hologram) return;
		distracted.clear();
		hologram.A_Startsound("holosg/off",22273);
		hologram.destroy();
		if (hologramfuzz) hologramfuzz.destroy();
	}
	
	void AggroMonsters()
	{
		distracted.clear();
		BlockThingsIterator it = BlockThingsIterator.Create(hologram,prange);
		while (it.Next())
		{
			let obj = it.thing;
			if (obj.bISMONSTER && obj.health > 0 && !obj.bNOTARGETSWITCH && obj.Distance3D(hologram) <= prange && obj.Checksight(hologram))
			{
				distracted.push(obj);
				obj.target = hologram;
			}
		}
		if (distracted.size() > 0)
		{
			actor selected = distracted[random(1,distracted.size())-1];
			hologram.angle = hologram.AngleTo(selected);
			selected.target = hologram;
		}
	}
}
// ===================== Pickup Hologram =====================
Class HoloStrifeguyPHG : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOBLOCKMAP;
	//	+WALLSPRITE; //uncomment for a spinning pickup hologram
		Renderstyle "translucent";
		scale 0.5;
		alpha 0.8;
	}
	States
	{
	Spawn:
		VHSG E 1 bright;
		Loop;
	}
}

Class HoloStrifeguyPHGfuzz : HoloStrifeguyPHG
{
	Default
	{
		RenderStyle "fuzzy";
	}
}

// ===================== Decoy Hologram =====================
Class HoloStrifeguyDecoy : Actor
{
	double osc;
	Default
	{
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+NODAMAGE;
		+NOBLOOD;
		+MOVEWITHSECTOR;
		+DONTTHRUST;
		+SHOOTABLE;
		+BRIGHT;
		Renderstyle "translucent";
		alpha 1.0;
		height 72;
	}
	States
	{
	Spawn:
		PLAY E 1 Oscillate();
		Loop;
	Provoke:
		TNT1 A 0 A_Startsound("weapons/assaultgun");
		PLAY FFFFFF 1 bright Oscillate();
		PLAY FEEEEEEEEEEEEEE 1 Oscillate();
		TNT1 A 0 A_Startsound("weapons/assaultgun");
		PLAY FFFFFF 1 bright Oscillate();
		PLAY FEEEEEEEEEEEEEE 1 Oscillate();
		TNT1 A 0 A_Startsound("weapons/assaultgun");
		PLAY FFFFFF 1 bright Oscillate();
		PLAY FEEEEEEEEEEEEEE 1 Oscillate();
		Goto Spawn;
	}
	void Oscillate()
	{
		if (alpha >= 1.0) osc = -0.1;
		if (alpha <= 0.7) osc = 0.1;
		alpha += osc;
	}
}

Class HoloStrifeguyDecoyFuzz : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+MOVEWITHSECTOR;
		Renderstyle "fuzzy";
	}
}

// Portable Teleporter Device
// https://www.realm667.com/repository#preview-18
/*
Name: Portable Teleport Device
Type: Teleport
Palette: Doom
Summon: PTDevice, PTBeacon, PETDevice
Use type: Inventory
Duration: Map / Instant
Brightmaps: Yes
Actor modification: No
ACS: No

Description:
This handy gadget comes in two variants.

Portable Teleport Device:
The green device allows you to teleport to a previously placed beacon at the press of a button.
Activate the beacon to drop it to your feet, then use the device to teleport back to the beacon.
This device and its beacon are reusable, you can always pick the beacon back up and drop it elsewhere.
Beware, the beacon can be destroyed under closing doors and ceiling/floor crushers.
Also it will temporarily deactivate if something else (for example a monster) occupies the same space.

Portable Emergency Teleport Device:
The red device monitors your vital signs and acts as an emergency escape.
Once you are at the brink of death it will teleport you back to the start of the map.
The device will be consumed however, which is a small price to pay to save your life.
You can also activate it manually anytime, no beacon is needed.


Note to mappers: if you place more than one beacon in your map, one of them will be randomly chosen when teleporting.

Code: DeVloek
GLDefs: DeVloek
Sounds: DeVloek
Sprites: Sonik.O.Fan, Inti Creates
Sprite Edit: DeVloek
Idea base: Captain Toenail's Sigil Scroll
*/
//===================== Portable Teleport Device =====================
class PTDevice : Inventory
{
	Default
	{
		//$Category "Gadgets"
		//$Color 17
		//$Title "Portable Teleport Device"
		+COUNTITEM;
		+INVENTORY.INVBAR;
		Inventory.Maxamount 1;
		Inventory.Icon "VPTDA0";
		Inventory.PickupMessage "Picked up a Portable Teleport Device.";
		Scale 0.75;
	}
	States
	{
	Spawn:
		VPTD ABCDCB 5;
		Loop;
	}
	override bool Use(bool pickup)
	{
		if (owner && owner.player)
		{
			let [st,bl] = owner.A_Teleport("None","PTSpot","PTFog",TF_KEEPORIENTATION|TF_NOJUMP|TF_SENSITIVEZ,0);
			if (bl) owner.A_Startsound("ptdevice/activate");
			else owner.A_Startsound("ptdevice/fail");
		}
		return false;
	}
}

class PTBeacon : Inventory
{
	vector3 bpos;
	actor bdummy;
	actor bspot;
	bool bpickup;
	Default
	{
		//$Category "Gadgets"
		//$Color 17
		//$Title "Portable Teleport Beacon"
		Radius 16;
		Height 56;
		+BLOCKEDBYSOLIDACTORS;
		+DONTGIB;
		+MOVEWITHSECTOR;
		+NOTELEPORT;
		+COUNTITEM;
		+INVENTORY.INVBAR;
		Inventory.Maxamount 1;
		Inventory.Icon "VPTBF0";
		Inventory.PickupMessage "Picked up a Portable Teleport Beacon.";
		Xscale 0.75;
		Yscale 0.5;
	}
	States
	{
	Spawn:
		VPTB E 1
		{
			bpos = pos;
		}
		TNT1 A 0
		{
			vector3 newpos = pos;
			if (newpos == bpos) SetStatelabel("See");
		}
		Loop;
	See:
		VPTB AAABBBCCCDDD 2
		{

			if (!bdummy) bdummy = spawn("PTDummy",pos);
			if (bdummy)
			{
				let [bl,blocker] = bdummy.TestMobjZ();
				if (blocker) frame = 4;
				else if (!bspot)
				{
					bspot = spawn("PTSpot",pos);
					if (bspot) A_Startsound("ptdevice/activate");
				}
			}
			if (bspot)
			{
				bpickup = true;
				let [bl,blocker] = bspot.TestMobjZ();
				if (blocker) bspot.destroy();
			}
			if (ceilingz - floorz < 10) SetStateLabel("Death");
		}
		Loop;
	Death:
		MISL B 4 Bright 
		{
			if (bdummy)	bdummy.destroy();
			if (bspot) bspot.destroy();
			scale = (1.0,1.0);
			A_Startsound("world/barrelx",pitch:1.3);
			A_Explode(64,64,XF_CIRCULAR);
		}
		MISL C 4 Bright;
		MISL D 4 Bright;
		Stop;
	}
	override void AttachToOwner (Actor other)
	{
		Super.AttachToOwner(other);
		bpickup = false;
		if (bdummy)	bdummy.destroy();
		if (bspot) bspot.destroy();

	}
	override bool Use(bool pickup)
	{
		if (owner && owner.player) owner.DropInventory(self);
		return false;
	}
	override bool CanPickup(Actor toucher)
	{
		if(toucher && toucher.player && bpickup) return Super.CanPickup(toucher);
		return false;
	}
}

Class PTSpot : SpecialSpot
{
	Default
	{
		+MOVEWITHSECTOR;
		+NOINTERACTION;
		+NOBLOCKMAP;
	}
}

Class PTDummy : Actor
{
	Default
	{
		+MOVEWITHSECTOR;
		+NOINTERACTION;
		+NOBLOCKMAP;
	}
}
Class PTFog : TeleportFog
{
	Default
	{
		+NOINTERACTION;
		alpha 0.75;
	}
}

//===================== Portable Emergency Teleport Device =====================
class PETDevice : Inventory
{
	bool ppos;
	Default
	{
		//$Category "Gadgets"
		//$Color 17
		//$Title "Portable Emergency Teleport Device"
		+COUNTITEM;
		+INVENTORY.INVBAR;
		Inventory.Maxamount 1;
		Inventory.Icon "VPTEA0";
		Inventory.PickupMessage "Picked up a Portable Emergency Teleport Device.";
		Scale 0.75;
	}
	States
	{
	Spawn:
		VPTE ABCDCB 5;
		Loop;
	}
	override void DoEffect()
	{
		super.DoEffect();
		if (owner && owner.player)
		{
			owner.bBUDDHA = true;
			if (owner.health < 10)
			{
				spawn("PTEmergency",owner.pos);
				destroy();
			}
		}
	}
	override bool Use(bool pickup)
	{
		if (owner && owner.player) spawn("PTEmergency",owner.pos);
		return true;
	}
}

Class PTEmergency : TelOtherFX1
{
	States
	{
	Spawn:
		TNT1 A 1;
		Wait;
	Death:
		TNT1 A 1;
		Stop;
	}
	override int SpecialMissileHit(Actor victim)
	{
		if (victim && victim.player)
		{
			victim.A_Startsound("ptdevice/activate");
			victim.bBUDDHA = false;
			return -1;
		}
		return 1;
	}
}

// It's time for:
/*
*************************************************
*
*
*			MONSTER RESOURCE WAD
*			DEFINITIVE EDITION
*
*
*
*************************************************
*/
// Dark Imp Pack here 
// https://www.realm667.com/repository/beastiary/doom-style?start=60#preview-6
// Dark Imp Nanami
/*
Name: Dark Imp (Nami)
Difficulty: Easy
Connections: None
Summon: NamiDarkImp
Melee: Yes
Distance: Projectile
Type: Demon
Brightmaps: No
Actor modification: No
ACS: No

Code: Nanami, Itsnaturetodie, Ghastly (ZScript conversion)
GLDefs: Ghastly
Sounds: Id Software
Sprites: Id Software
Sprite Edit: Nanami, Itsnaturetodie
*/
Class NamiDarkImp : Actor
{
  Default
  {
    Health 105;
    Radius 20;
    Height 56;
    Speed 8;
    PainChance 200;
    SeeSound "imp/sight";
    PainSound "imp/pain";
    DeathSound "imp/death";
    ActiveSound "imp/active";
    Obituary "%o was cursed by a dark imp.";
    HitObituary "%o was touched by a dark imp.";
    MONSTER;
    +FLOORCLIP
  }

  States
  {
  Spawn:
    DRKI AB 10 A_Look();
    Loop;
  See:
    DRKI AABBCCDD 3 A_Chase();
    Loop;
  Melee:
  Missile:
    DRKI EF 8 A_FaceTarget();
    DRKI G 6 A_CustomComboAttack("DarkSeeker", 32, 3*random(1,8), "imp/melee");
    Goto See;
  Pain:
    DRKI H 2;
    DRKI H 2 A_Pain();
    Goto See;
  Death:
    DRKI I 8;
    DRKI J 8 A_Scream();
    DRKI K 6;
    DRKI L 6 A_Fall();
    DRKI M -1;
    Stop;
  XDeath:
    DRKI N 5;
    DRKI O 5 A_XScream();
    DRKI P 5;
    DRKI Q 5 A_Fall();
    DRKI RST 5;
    DRKI U -1;
    Stop;
  Raise:
    DRKI ML 8;
    DRKI KJI 6;
    Goto See;
  }
}

Class DarkSeeker : Actor
{
  Default
  {
    Radius 8;
    Height 6;
    Speed 9;
    Damage 3;
    RENDERSTYLE "ADD";
    ALPHA 0.67;
    SeeSound "imp/attack";
    DeathSound "imp/shotx";
    Decal "DoomImpScorch";
    PROJECTILE;
    +SEEKERMISSILE
  }

  States
  {
  Spawn:
    DKB1 AB 4 Bright A_SeekerMissile(5,10);
    Loop;
  Death:
    DKB1 CDE 4 Bright;
    Stop;
  }
}
// Skulltag Dark Imp
/*
Name: Dark Imp (Skulltag)
Difficulty: Easy
Connection: None
Summon: STDarkImp
Melee: Yes
Distance: Projectile
Type: Demon
Brightmaps: Yes
Actor modification: No
ACS: No

Code: Skulltag, Vader, Ghastly (ZScript conversion)
GLDefs: Ghastly, Sandypaper (Brightmaps)
Sounds: Id Software
Sprites: Id Software
Sprite Edit: Vader
Idea Base: Skulltag
*/
Class STDarkImp : Actor
{
  Default
  {
    Health 110;
    Radius 20;
    Height 56;
    Speed 9;
    PainChance 200;
    SeeSound "imp/sight";
    PainSound "imp/pain";
    DeathSound "imp/death";
    ActiveSound "imp/active";
    Obituary "%o was cursed by a dark imp.";
    HitObituary "%o was touched by a dark imp.";
    MONSTER;
    +FLOORCLIP
  }

  States
  {
  Spawn:
    DRKS AB 10 A_Look();
    Loop;
  See:
    DRKS AABBCCDD 3 A_Chase();
    Loop;
  Melee:
  Missile:
    DRKS EF 8 A_FaceTarget();
    DRKS G 6 A_CustomComboAttack("DarkFast", 32, 3*random(1,8), "imp/melee");
    Goto See;
  Pain:
    DRKS H 2;
    DRKS H 2 A_Pain();
    Goto See;
  Death:
    DRKS I 8;
    DRKS J 8 A_Scream();
    DRKS K 6;
    DRKS L 6 A_Fall();
    DRKS M -1;
    Stop;
  XDeath:
    DRKI N 5;
    DRKI O 5 A_XScream();
    DRKI P 5;
    DRKI Q 5 A_Fall();
    DRKI RST 5;
    DRKI U -1;
    Stop;
  Raise:
    DRKS ML 8;
    DRKS KJI 6;
    Goto See;
  }
}

Class DarkFast : Actor
{
  Default
  {
    Radius 8;
    Height 6;
    Speed 18;
    Damage 3;
    RENDERSTYLE "ADD";
    ALPHA 0.67;
    SeeSound "imp/attack";
    DeathSound "imp/shotx";
    Decal "DoomImpScorch";
    PROJECTILE;
  }

  States
  {
  Spawn:
    DKB1 AB 4 Bright;
    Loop;
  Death:
    DKB1 CDE 4 Bright;
    Stop;
  }
}

// Void Dark Imp
/*
Name: Dark Imp (Void)
Difficulty: Easy
Connections: None
Summon: VoidDarkImp
Melee: Yes
Distance: Projectile
Type: Demon
Brightmaps: Yes
Actor modification: No
ACS: No

Code: Cyb, Vader, Ghastly Dragon (ZScript conversion)
GLDefs: Ghastly Dragon, Sandypaper (Brightmaps)
Sounds: Id Software
Sprites: Id Software
Sprite Edit: Vader, Nanami (recolor)
Idea Base: Cyb
*/
Class VoidDarkImp : Actor
{
  Default
  {
    Health 130;
    Radius 20;
    Height 56;
    Speed 7;
    PainChance 200;
    SeeSound "imp/sight";
    PainSound "imp/pain";
    DeathSound "imp/death";
    ActiveSound "imp/active";
    Obituary "%o was cursed by a dark imp.";
    HitObituary "%o was touched by a dark imp.";
    MONSTER;
    +FLOORCLIP
  }

  States
  {
  Spawn:
    DRKV AB 10 A_Look();
    Loop;
  See:
    DRKV AABBCCDD 3 A_Chase();
    Loop;
  Melee:
    DRKV EF 8 A_FaceTarget();
    DRKV G 6 A_CustomComboAttack("DarkNormal", 32, 3*random(1,8), "imp/melee");
    Goto See;
  Missile:
    DRKV E 0 A_Jump(64,"Missile2");
    DRKV EF 8 A_FaceTarget();
    DRKV G 6 A_SpawnProjectile("DarkNormal", 32, 0, 0);
    Goto Missile3;
  Missile2:
    DRKV IJ 8 Bright A_FaceTarget();
    DRKV K 6 Bright A_SpawnProjectile("DarkStrong", 32, 0, 0);
  Missile3:
    DRKV E 0 A_Jump(64,"Missile4");
    DRKV EF 8 A_FaceTarget();
    DRKV G 6 A_SpawnProjectile("DarkNormal", 32, 0, 0);
    Goto See;
  Missile4:
    DRKV IJ 8 Bright A_FaceTarget();
    DRKV K 6 Bright A_SpawnProjectile("DarkStrong", 32, 0, 0);
    Goto See;
  Pain:
    DRKV H 2;
    DRKV H 2 A_Pain();
    Goto See;
  Death:
    DRKV L 8;
    DRKV M 8 A_Scream();
    DRKV N 5;
    DRKV O 5 A_Fall();
    DRKV P -1;
    Stop;
  XDeath:
    DRKI N 5;
    DRKI O 5 A_XScream();
    DRKI P 5;
    DRKI Q 5 A_Fall();
    DRKI RST 5;
    DRKI U -1;
    Stop;
  Raise:
    DRKV PO 8;
    DRKV NML 6;
    Goto See;
  }
}

Class DarkNormal : Actor
{
  Default
  {
    Radius 8;
    Height 6;
    Speed 9;
    Damage 3;
    RENDERSTYLE "ADD";
    ALPHA 0.67;
    SeeSound "imp/attack";
    DeathSound "imp/shotx";
    Decal "DoomImpScorch";
    PROJECTILE;
  }

  States
  {
  Spawn:
    DKB1 AB 4 Bright;
    Loop;
  Death:
    DKB1 CDE 4 Bright;
    Stop;
  }
}

Class DarkStrong : Actor
{
  Default
  {
    Radius 8;
    Height 6;
    Speed 9;
    Damage 6;
    RENDERSTYLE "ADD";
    ALPHA 0.67;
    SeeSound "imp/attack";
    DeathSound "imp/shotx";
    Decal "DoomImpScorch";
    PROJECTILE;
  }

  States
  {
  Spawn:
    DKB2 AB 4 Bright A_SpawnItemEx("DarkTail", 0, 0, 0, 0, 0, 0, 0, 128);
    Loop;
  Death:
    DKB2 CDE 4 Bright;
    Stop;
  }
}

Class DarkTail : Actor
{
  Default
  {
    RENDERSTYLE "ADD";
    ALPHA 0.5;
    PROJECTILE;
    +NOCLIP
  }

  States
  {
  Spawn:
    DKBT ABCDEF 2 Bright;
    Stop;
  }
}



// End MRW

// Ignitable Fire Cauldron Kan3
// https://www.doomworld.com/forum/topic/149424-interactive-ignitable-fire-cauldron/
// https://drive.google.com/file/d/1gi-VBFCxjr0w2hsQSaaPZrUfTuE6H3Ll/view?usp=sharing
/*
NOTE: This is actually not a Realm667 file! It's a DW tutorial.

Information:
Name: Fire cauldron - Unlit cauldron
Connection: Heretic
Palette: Doom
Summon: IgniteCauldron - UnlitCauldron
Ambient Sound: Yes
De-/Activatable: No (only ignitable when hit with the proper projectiles and/or touched with the proper weapons)
Destroyable: No
Special Effects: Yes (fire and embers)
Brightmaps: Yes
Actor modification: No
ACS: No

Credits:
Code: Captain Toenail
GLDefs: Captain Toenail
Sounds: freesound.org (cribbler)
Sprites: ShadowCaster
Sprite Edit: Captain Toenail

Description:
A large metal fire bowl filled with burning coals.
The flames will be slowly consumed, leaving smoldering hot coals,
which, in turn, will wear out.
The burning time can be modified in the map editor.
When the coals are cooled down, they can be ignited,
by hitting the cauldron with the right projectiles or
approaching it with the right weapon in hand.

FIRECAULDRON:
(https://www.realm667.com/repository/prop-stop/light-sources/1054-fire-cauldron)
Code: Kan3
GLDefs: Captain Toenail, Kan3
Brightmaps: Kan3
Sprites: ShadowCaster, Id Software
Sounds: freesound.org (cribbler), Id Software, Kan3
Sprite Edit: Kan3
*/
/*
Class IgniteCauldron : Actor
{
	Array <string> incendiary; //Incendiary weapons list
	bool burning; //Check if the cauldron shouldn't be unlit
	bool setFire; //Check if there's should be flames
	bool embers; //Check if it should just have embers
	int timer; //Cooldown
	
	private int WSFlags;
	flagdef Flammable: WSFlags, 0; //Custom flag to make the unlit cauldron ignitable
	Default
	{
		//$Category Light sources
		//$Arg0 Timer (minutes)
		//$Arg0Default 4
		Radius 28;
		Height 28;
		+NOBLOOD
		+DONTTHRUST
		+NODAMAGE
		+SOLID
		+SHOOTABLE
		+DONTGIB
		+NOICEDEATH
		+NOTAUTOAIMED
		+NOBLOODDECALS
		Tag "Fire cauldron";
	}
	States
	{
	Spawn:
	Flame:
		LAVC GHIH random(3,6);
		Loop;
	Ember:
		LAVC DEFE random(5,8);
		Loop;
	Expire:
		LAVC C -1;
		Stop;
	}
	
	action void A_UpwardDamage(double hrange, int dmgrate, int dmg, name dmgtype) { //Custom function to damage whoever is on top of the actor
		BlockThingsIterator area = BlockThingsIterator.Create(self, Radius*Scale.x);
		while(area.Next()) {
			let victim = area.thing;
			if(!victim || victim.GetClass() is GetClass() || victim.health < 1 || !victim.bSHOOTABLE) //Check if the victim is not the actor itself and is shootable
				return;
			if(Distance2D(victim) <= Radius*Scale.x && victim.pos.z - pos.z <= hrange + height && GetAge() % dmgrate == 0) { //If the cistim is within the cauldron radius and not too too high up
				victim.DamageMobj(self, self, dmg, dmgtype, DMG_THRUSTLESS); //then deal damage every dmgrate times
			}
		}
	}
	
	override void PostBeginPlay() {
		incendiary.Clear(); //Clear the array first
		incendiary.Push("FireBow"); //Add the weapons needed
		incendiary.Push("Chainsaw"); //it can be ANY weapon
		//incendiary.Push("your weapon class here");
		
		if(!bFLAMMABLE) { //If the custom flag is not set
			setFire = true; //set the cauldron on fire
			burning = true;
			A_StartSound("fire/cauldron", 6, CHANF_LOOP, 1.0, 2.0);
		}
		
		if(Args[0] < 0) //If the timer is set to a negative number
			Args[0] = 4; //Set it to deafault
		else if(Args[0] == 0) //If it is 0
			timer = 4; //set the timer to 4 seconds (debugging)
		else { //otherwise
			timer = random((Args[0]-1)*60,(Args[0]+1*60)); //set the timer to a random value centered at Args[0]
			if(timer < 60) //if the resulted timer is less than 1 minute
				timer = 60; //set it to 1 minute
		}
		Super.PostBeginPlay();
	}
	
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) {
		if(bFLAMMABLE) { //If the actor can be set on fire
			if(inflictor) { //if the actor directly dealing the damage exists
				string proj = inflictor.GetClassName(); //get it's class name
				if(damagetype == 'Fire' //if the damage received is fire damage
				|| inflictor is 'Rocket' //or the damage dealer is part of this list (can be modified at wish)
				|| inflictor is 'PlasmaBall'
				|| inflictor is 'DoomImpBall'
				|| inflictor is 'FatShot'
				|| inflictor is 'BaronBall'
				|| inflictor is 'RevenantTracer'
				|| inflictor is 'ArachnotronPlasma'
				|| proj.IndexOf("Fire") > 0 //or the name of the damage dealer has one of these words in its name (can be modified at wish)
				|| proj.IndexOf("fire") > 0
				|| proj.IndexOf("Exp") > 0
				|| proj.IndexOf("exp") > 0
				|| proj.IndexOf("Grenade") > 0
				|| proj.IndexOf("grenade") > 0
				|| proj.IndexOf("Plasma") > 0
				|| proj.IndexOf("plasma") > 0
				|| proj.IndexOf("Flame") > 0
				|| proj.IndexOf("flame") > 0
				|| proj.IndexOf("Rocket") > 0
				|| proj.IndexOf("rocket") > 0) {
					if(PoisonDurationReceived > 0) { //if the cauldron is getting poisoon damage
						PoisonDurationReceived = 0; //clean it
						PoisonDamageReceived = 0;
					}
					if(!burning && waterlevel < 2 && damage > 0) burning = true; //if the cauldron is unlit and not underwater, prepare to lit it up
				}
			}
		}
		return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
	}
	
	override void Tick() {
		Super.Tick();
		if(waterlevel > 1 && burning) //If underwater
			burning  = false; //unlit
		
		if(setFire) { //if on fire
			if(GetAge() % 35 == 0) { //Check every second
				if(timer <= 0 || !burning) { //if the timer has reached 0 or it should burn off
					setFire = false; //set it not to be on fire
					embers = true; //set the embers checker
					if(Args[0] == 0)
						timer = 4;
					else {
						timer = random((Args[0]-1)*30,(Args[0]+1*30)); //set the cooldown to be halved compared to when it's on fire
						if(timer < 30)
							timer = 30;
					}
					A_StartSound("ember/cauldron", 6, CHANF_LOOP, 0.75, 2.0, 1.5);
					SetStateLabel("Ember"); //set the correct state
				}
				timer--; //reduce the timer
			}
			A_UpwardDamage(32, 21, random(1,5), "Fire"); //deal damage to whoever is on top
		}
		
		else if(embers) {
			if(GetAge() % 35 == 0) { //Check every second
				if(timer <= 0 || !burning) {
					burning = false; //set it to be unlit
					embers = false; //unset the embers checker
					bFLAMMABLE = true; //set it to be ignitable
					A_StopSound(6);
					for(int s = 0; s <= 3; s++) {
						actor smokesp = Spawn("ExpireSmokeSpawner", (pos.xy, pos.z + Height * 0.75), ALLOW_REPLACE); //Spawn the smoke
						if(smokesp)
							smokesp.target = self; //set the smoke target to be the cauldron
					}
					SetStateLabel("Expire"); //set the correct state
				}
				timer--; //reduce the timer
			}
			A_UpwardDamage(8, 35, random(1,3), "Fire"); //deal damage to whoever is on top
		}
		else if(waterlevel < 2) {
			bool ignite;
			if(burning) //if it should be set on fire
				ignite = true; //confirm it
			if(GetAge() % 35 == 0) { //Check every second
				BlockThingsIterator area = BlockThingsIterator.Create(self, Radius*2.0);
				while(area.Next()) { //Look for every player nearby
					let adventurer = area.thing;
					if(adventurer.player && adventurer.player.Health > 0 && incendiary.Size() > 0) {
						bool handIncend;
						string handWeapon = adventurer.player.ReadyWeapon.GetClassName(); //Check the weapon the player has in his hands
						for(int i = 0; i < incendiary.Size(); i++) { //if the weapon is in the list specified above
							if(handWeapon ~== incendiary[i]) {
								handIncend = true; //confirm it
								break;
							}
						}
						if(handIncend) { //if it is confirmed
							FLineTraceData hitCauldron;
							double pz = adventurer.height * 0.5 - adventurer.floorclip + adventurer.player.mo.AttackZOffset*adventurer.player.crouchFactor;
							bool hit = adventurer.LineTrace(adventurer.angle, Radius + 16.0, adventurer.pitch, offsetz: pz, data: hitCauldron);
							if(hit && hitCauldron.HitType == TRACE_HitActor && hitCauldron.HitActor.GetClassName() == self.GetClassName()) { //if the player is close and is looking at the cauldron with the specified weapon in hand
								ignite = true; //let the cauldron be set on fire
								break;
							}
						}
					}
				}
			}
			if(ignite) { //If the cauldron should be set on fire
				burning = true; //If it can stay on fire
				setFire = true; //set the flames
				if(Args[0] == 0)
					timer = 4;
				else {
					timer = random((Args[0]-1)*60,(Args[0]+1*60)); //reset the timer
					if(timer < 60)
						timer = 60;
				}
				bFLAMMABLE = false; //remove the ignitable ability
				A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]); //call a special if set in the editor
				A_StartSound("fire/start", CHAN_BODY, 0, 1.0, 2.0);
				A_StartSound("fire/cauldron", 6, CHANF_LOOP, 1.0, 2.0);
				SetStateLabel("Flame"); //set the correct state
			}
		}
	}
}

Class UnlitCauldron : IgniteCauldron //Unlit version
{
	Default
	{
		//$Sprite LAVCC0
		+IgniteCauldron.FLAMMABLE; //set the flag to make it ignitable
		Tag "Unlit cauldron";
	}
	States
	{
	Spawn:
		Goto Super::Expire;
	}
}

Class ExpireSmokeSpawner : Actor //Smoke spawner
{
	Default
	{
		ReactionTime 16;
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 AAAAAAAAAAAA 1 NoDelay {
			if(random() >= 224) {
				actor bsmoke = Spawn("ExSmoke", pos, ALLOW_REPLACE); //Continuosly spawn smoke at a radnom rate
				if(bsmoke) {
					bsmoke.scale = scale; //Set the smoke scale to match the spawner
					bsmoke.vel.z = frandom(0.1,1.0); //set a random vertical velocity to the smoke
				}
			}
		}
		TNT1 A 0 A_Countdown();
		Loop;
	Death:
		TNT1 A 1;
		Stop;
	}
	
	Override void PostBeginPlay() {
		if(target) {
			double frad = frandom(-target.Radius,target.Radius); //Get a random vertical spawn position for the smoke based on the cauldron height
			double fhgt = frandom(target.Height*0.6,target.Height*0.9); //Get a random horizontal spawn position for the smoke based on the cauldron height
			A_StartSound("ex/cauldron", 0, 0, 1.0, 2.0, 1.0, 0.25);
			scale *= frandom(0.7,1.7)*(target.Radius/50+target.Height/140)/2.0; //set the scale depending on the cauldron size
			SetOrigin((target.pos.x + frad, target.pos.y + frad, target.pos.z + fhgt), false); //set the oring of the spawner based on the previous variables
		}
		Super.PostBeginPlay();
	}
}

Class ExSmoke : Actor
{
	Default
	{
		Renderstyle "Translucent";
		Alpha 0.5;
		+NOINTERACTION
		+NOGRAVITY
	}
	States
	{
	Spawn:
		SMOK ABCDEFGHIJKLMNOP 4 { vel.z *= 0.9; A_FadeOut(0.01); }
		Stop;
	}
}
*/